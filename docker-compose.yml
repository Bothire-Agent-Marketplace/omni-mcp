# =============================================================================
# Omni MCP - Production Docker Compose Configuration
# =============================================================================
# This is the main production compose file
# For development, use: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up

version: "3.8"

networks:
  mcp-network:
    driver: bridge
    name: omni-mcp-network

volumes:
  postgres-data:
    name: omni-postgres-data
  mcp-files:
    name: omni-mcp-files
  mcp-uploads:
    name: omni-mcp-uploads

services:
  # ==========================================================================
  # MCP Gateway - Central hub for all MCP servers
  # ==========================================================================
  mcp-gateway:
    build:
      context: .
      dockerfile: gateway/Dockerfile
      target: production
    image: omni/mcp-gateway:latest
    container_name: omni-mcp-gateway
    restart: unless-stopped
    ports:
      - "${GATEWAY_PORT:-37373}:37373"
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - GATEWAY_PORT=37373
    networks:
      - mcp-network
    depends_on:
      linear-mcp-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "console.log('Gateway health check')"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s

  # ==========================================================================
  # Linear MCP Server - Linear API integration
  # ==========================================================================
  linear-mcp-server:
    build:
      context: .
      dockerfile: servers/linear-mcp-server/Dockerfile
      target: production
    image: omni/linear-mcp-server:latest
    container_name: omni-linear-mcp-server
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LINEAR_API_KEY=${LINEAR_API_KEY}
    networks:
      - mcp-network
    healthcheck:
      test:
        ["CMD", "node", "-e", "console.log('Linear MCP server health check')"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s

  # ==========================================================================
  # PostgreSQL Database - Shared data store
  # ==========================================================================
  postgres:
    image: postgres:16-alpine
    container_name: omni-postgres
    restart: unless-stopped
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-omni_mcp}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./data/sql:/docker-entrypoint-initdb.d:ro
    networks:
      - mcp-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-omni_mcp}",
        ]
      interval: 30s
      timeout: 10s
      retries: 5

  # ==========================================================================
  # File System MCP Server - File operations
  # ==========================================================================
  filesystem-mcp-server:
    image: mcp/filesystem:latest
    container_name: omni-filesystem-mcp-server
    restart: unless-stopped
    environment:
      - ALLOWED_PATHS=/data,/uploads
      - MAX_FILE_SIZE=10485760
      - NODE_ENV=production
    volumes:
      - mcp-files:/data:rw
      - mcp-uploads:/uploads:rw
      - ./data/files:/data:rw
      - ./data/uploads:/uploads:rw
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "sh", "-c", "test -d /data && test -d /uploads"]
      interval: 30s
      timeout: 3s
      retries: 3

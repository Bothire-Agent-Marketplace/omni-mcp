---
description: 
globs: 
alwaysApply: false
---
# Shared Schemas Rules

## 🎯 **Shared Type System (MANDATORY)**
ALL MCP servers in this project MUST use shared types from `@mcp/schemas` package.

## 📁 **Schema Structure**
```
shared/schemas/
├── src/
│   ├── index.ts                 # Main export file
│   ├── mcp/
│   │   └── types.ts             # ✅ CORE MCP TYPES (mandatory for all servers)
│   └── {service}/
│       ├── mcp-types.ts         # Service-specific MCP types
│       └── schemas.ts           # Business logic schemas
```

## ✅ **Core MCP Types (ALL servers MUST use)**

### **Response Types (MANDATORY)**
```typescript
// ✅ MANDATORY - All tool returns must use this
export type McpResponse<T = any> = McpSuccessResponse<T> | McpErrorResponse;

export type McpSuccessResponse<T> = {
  success: true;
  data: T;
  timestamp?: string;
  executionTime?: number;
};

export type McpErrorResponse = {
  success: false;
  error: string;
  timestamp?: string;
  executionTime?: number;
};
```

### **Definition Types for Const Arrays**
```typescript
// ✅ Use readonly-compatible types for as const definitions
export interface ToolDefinition {
  name: string;
  description: string;
  inputSchema: {
    type: "object";
    properties: Record<string, any>;
    required?: readonly string[];
  };
}

export interface ResourceDefinition {
  uri: string;
  name: string;
  description: string;
  mimeType: string;
}

export interface PromptDefinition {
  name: string;
  description: string;
  arguments?: readonly PromptArgumentDefinition[];
}
```

## 🔧 **Service-Specific Schema Patterns**
```typescript
// ✅ CORRECT - Service-specific types extending core types
import { 
  ToolDefinition, 
  ResourceDefinition, 
  PromptDefinition,
  McpResponse 
} from "../mcp/types.js";

// Service entity types with Zod validation
export const LinearIssueSchema = z.object({
  id: z.string(),
  title: z.string(),
  // ... other fields
});

export type LinearIssue = z.infer<typeof LinearIssueSchema>;

// Service response types
export type LinearSearchResponse = McpResponse<{
  issues: LinearIssue[];
  count: number;
}>;

// Service definitions using readonly-compatible types
export const LINEAR_TOOLS: readonly ToolDefinition[] = [
  // ... tool definitions
] as const;
```

## 📋 **Schema Development Rules**
- **Use Zod** for all schema validation
- **Export both schemas and types** for runtime + compile-time validation
- **Use readonly-compatible types** for `as const` definitions
- **Follow consistent naming**: `{Service}{Entity}Schema` and `{Service}{Entity}`
- **Include comprehensive JSDoc** comments for all exported types

## ✅ **Import/Export Patterns**
```typescript
// ✅ CORRECT - Main index.ts exports
export * from "./mcp/types.js";
export * from "./linear/mcp-types.js";

// ✅ CORRECT - Service imports
import { LINEAR_TOOLS, LINEAR_RESOURCES, LINEAR_PROMPTS } from "@mcp/schemas";
```

## 🚫 **Schema Anti-Patterns**
- ❌ Don't create custom response types (use `McpResponse<T>`)
- ❌ Don't use mutable arrays with `as const` (use readonly types)
- ❌ Don't duplicate schemas across services
- ❌ Don't skip Zod validation for external API data
- ❌ Don't use `any` without strong justification

---
description: 
globs: 
alwaysApply: false
---
# Docker Rules

## üê≥ **MCP Server Containerization (MANDATORY)**
Each MCP server MUST have its own Dockerfile following these patterns:

## üìã **Dockerfile Structure**
```dockerfile
# ‚úÖ CORRECT - Multi-stage build for MCP servers
FROM node:18-alpine AS builder

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./
COPY pnpm-lock.yaml ./

# Install dependencies
RUN npm install -g pnpm
RUN pnpm install --frozen-lockfile

# Copy source code
COPY . .

# Build the application
RUN pnpm build

# Production stage
FROM node:18-alpine AS production

WORKDIR /app

# Copy package files
COPY package*.json ./
COPY pnpm-lock.yaml ./

# Install production dependencies only
RUN npm install -g pnpm
RUN pnpm install --frozen-lockfile --prod

# Copy built application
COPY --from=builder /app/dist ./dist

# Create non-root user
RUN addgroup -g 1001 -S mcp && \
    adduser -S mcp -u 1001

# Change ownership
RUN chown -R mcp:mcp /app
USER mcp

# Expose port (if needed)
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node dist/health-check.js || exit 1

# Start the application
CMD ["node", "dist/index.js"]
```

## üîß **Dockerfile Best Practices**

### **Security**
- **Use non-root user** for running applications
- **Use specific base image tags** (not `latest`)
- **Scan for vulnerabilities** regularly
- **Minimize attack surface** with alpine images

### **Optimization**
- **Use multi-stage builds** to reduce image size
- **Cache dependencies** efficiently with proper COPY order
- **Use .dockerignore** to exclude unnecessary files
- **Combine RUN commands** to reduce layers

### **Health Checks**
```dockerfile
# ‚úÖ CORRECT - Include health check for MCP servers
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:3000/health || exit 1
```

## üì¶ **Docker Compose Patterns**

### **Development Environment**
```yaml
# ‚úÖ CORRECT - docker-compose.dev.yml structure
version: '3.8'

services:
  mcp-gateway:
    build: ./gateway
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
    volumes:
      - ./gateway:/app
      - /app/node_modules
    depends_on:
      - linear-mcp-server
      
  linear-mcp-server:
    build: ./servers/linear-mcp-server
    environment:
      - NODE_ENV=development
      - LINEAR_API_KEY=${LINEAR_API_KEY}
    volumes:
      - ./servers/linear-mcp-server:/app
      - /app/node_modules
    healthcheck:
      test: ["CMD", "node", "dist/health-check.js"]
      interval: 30s
      timeout: 3s
      retries: 3
```

### **Production Environment**
```yaml
# ‚úÖ CORRECT - docker-compose.yml for production
version: '3.8'

services:
  mcp-gateway:
    build: 
      context: ./gateway
      target: production
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
    restart: unless-stopped
    depends_on:
      linear-mcp-server:
        condition: service_healthy
        
  linear-mcp-server:
    build:
      context: ./servers/linear-mcp-server
      target: production
    environment:
      - NODE_ENV=production
      - LINEAR_API_KEY=${LINEAR_API_KEY}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "dist/health-check.js"]
      interval: 30s
      timeout: 3s
      retries: 3
```

## üîß **Container Standards**

### **.dockerignore**
```
# ‚úÖ CORRECT - .dockerignore for MCP servers
node_modules
npm-debug.log*
.git
.gitignore
README.md
.env
.env.local
.nyc_output
coverage
.coverage
dist
.DS_Store
*.log
```

### **Environment Variables**
- **Use environment variables** for all configuration
- **Never hardcode secrets** in Dockerfiles
- **Use .env files** for development
- **Use secrets management** for production

## üö´ **Docker Anti-Patterns**
- ‚ùå Don't run as root user
- ‚ùå Don't use `latest` tags in production
- ‚ùå Don't copy unnecessary files (use .dockerignore)
- ‚ùå Don't install dev dependencies in production stage
- ‚ùå Don't skip health checks
- ‚ùå Don't hardcode configuration values

## üîß **Gateway Integration**
- **All servers connect through MCP Gateway**
- **Use service discovery** for server communication
- **Implement proper restart policies**
- **Use depends_on with health checks**
- **Configure network isolation** appropriately

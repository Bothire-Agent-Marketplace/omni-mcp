---
description:
globs:
alwaysApply: false
---
# Testing Rules

## 🧪 **Test Structure (MANDATORY)**
Follow this test organization pattern:
```
tests/
├── integration/               # End-to-end tests via gateway
├── unit/                     # Individual server unit tests
└── shared/                   # Shared test utilities
```

## ✅ **Test Requirements**
- **Test all tools** with shared type validation
- **Mock external API calls** for reliability
- **Test error handling paths** comprehensively
- **Use proper TypeScript types** in tests
- **Include performance benchmarks** for critical paths

## 🔧 **Unit Testing Patterns**

### **MCP Tool Testing**
```typescript
// ✅ CORRECT - Unit test for MCP tools
import { LinearTools } from '../src/mcp-server/tools/linear-tools.js';
import { SearchIssuesArgs, McpResponse } from '@mcp/schemas';

describe('LinearTools', () => {
  let linearTools: LinearTools;
  
  beforeEach(() => {
    // Mock the Linear client
    const mockClient = {
      issues: jest.fn(),
    };
    linearTools = new LinearTools('mock-api-key');
    (linearTools as any).client = mockClient;
  });

  describe('linear_search_issues', () => {
    it('should return success response with valid data', async () => {
      // Arrange
      const args: SearchIssuesArgs = {
        teamId: 'team-123',
        limit: 5,
      };
      
      const mockIssues = {
        nodes: [
          {
            id: 'issue-1',
            identifier: 'TEST-1',
            title: 'Test Issue',
            description: 'Test Description',
            priority: 2,
            state: Promise.resolve({ name: 'In Progress' }),
            assignee: Promise.resolve({ displayName: 'John Doe' }),
            team: Promise.resolve({ name: 'Test Team' }),
            url: 'https://linear.app/test/issue/TEST-1',
            createdAt: '2025-01-01T00:00:00Z',
            updatedAt: '2025-01-01T00:00:00Z',
          },
        ],
      };
      
      (linearTools as any).client.issues.mockResolvedValue(mockIssues);

      // Act
      const result = await linearTools.linear_search_issues(args);

      // Assert
      expect(result.success).toBe(true);
      if (result.success) {
        expect(result.data.issues).toHaveLength(1);
        expect(result.data.issues[0].identifier).toBe('TEST-1');
        expect(result.data.count).toBe(1);
        expect(result.data.query).toEqual(args);
      }
    });

    it('should return error response on API failure', async () => {
      // Arrange
      const args: SearchIssuesArgs = { teamId: 'team-123' };
      const errorMessage = 'API Error';
      
      (linearTools as any).client.issues.mockRejectedValue(new Error(errorMessage));

      // Act
      const result = await linearTools.linear_search_issues(args);

      // Assert
      expect(result.success).toBe(false);
      if (!result.success) {
        expect(result.error).toBe(errorMessage);
      }
    });
  });
});
```

### **Schema Validation Testing**
```typescript
// ✅ CORRECT - Test shared schema validation
import { SearchIssuesArgsSchema, LinearIssueSchema } from '@mcp/schemas';

describe('Schema Validation', () => {
  describe('SearchIssuesArgsSchema', () => {
    it('should validate correct search arguments', () => {
      const validArgs = {
        teamId: 'team-123',
        priority: 2,
        limit: 10,
      };
      
      const result = SearchIssuesArgsSchema.safeParse(validArgs);
      expect(result.success).toBe(true);
    });

    it('should reject invalid priority values', () => {
      const invalidArgs = {
        teamId: 'team-123',
        priority: 10, // Invalid: must be 0-4
      };
      
      const result = SearchIssuesArgsSchema.safeParse(invalidArgs);
      expect(result.success).toBe(false);
    });
  });
});
```

## 🔧 **Integration Testing Patterns**

### **MCP Server Integration**
```typescript
// ✅ CORRECT - Integration test via MCP protocol
import { Server } from '@modelcontextprotocol/sdk/server/index.js';
import { createLinearMcpServer } from '../src/mcp-server/server.js';

describe('Linear MCP Server Integration', () => {
  let server: Server;
  
  beforeEach(() => {
    server = createLinearMcpServer();
  });

  it('should list available tools', async () => {
    const request = {
      jsonrpc: '2.0' as const,
      id: 1,
      method: 'tools/list',
      params: {},
    };

    const response = await server.request(request);
    
    expect(response.result?.tools).toBeDefined();
    expect(response.result?.tools).toContain(
      expect.objectContaining({
        name: 'linear_search_issues',
      })
    );
  });

  it('should handle tool execution', async () => {
    const request = {
      jsonrpc: '2.0' as const,
      id: 1,
      method: 'tools/call',
      params: {
        name: 'linear_search_issues',
        arguments: { teamId: 'team-123', limit: 5 },
      },
    };

    const response = await server.request(request);
    
    expect(response.result?.content).toBeDefined();
    expect(response.result?.content[0].type).toBe('text');
  });
});
```

## 🔧 **Test Utilities and Mocks**

### **Shared Test Utilities**
```typescript
// ✅ CORRECT - Shared test utilities
export class MockLinearClient {
  issues = jest.fn();
  teams = jest.fn();
  projects = jest.fn();
  
  mockIssuesResponse(issues: any[]) {
    this.issues.mockResolvedValue({ nodes: issues });
    return this;
  }
  
  mockApiError(message: string) {
    this.issues.mockRejectedValue(new Error(message));
    return this;
  }
}

export function createMockLinearIssue(overrides: Partial<any> = {}) {
  return {
    id: 'issue-1',
    identifier: 'TEST-1',
    title: 'Mock Issue',
    description: 'Mock Description',
    priority: 2,
    state: Promise.resolve({ name: 'Todo' }),
    assignee: Promise.resolve(null),
    team: Promise.resolve({ name: 'Test Team' }),
    url: 'https://linear.app/test/issue/TEST-1',
    createdAt: '2025-01-01T00:00:00Z',
    updatedAt: '2025-01-01T00:00:00Z',
    ...overrides,
  };
}
```

## 📋 **Test Quality Standards**

### **Test Coverage**
- **Minimum 80% code coverage** for all MCP servers
- **100% coverage** for shared schemas and utilities
- **Test all error paths** and edge cases

### **Test Naming**
```typescript
// ✅ CORRECT - Descriptive test names
describe('linear_search_issues', () => {
  it('should return filtered issues when teamId is provided', () => {});
  it('should limit results to specified count', () => {});
  it('should handle empty results gracefully', () => {});
  it('should return error when API key is invalid', () => {});
});
```

### **Test Data Management**
- **Use factories** for test data creation
- **Mock external dependencies** consistently
- **Use realistic test data** that mirrors production
- **Clean up test state** between tests

## 🚫 **Testing Anti-Patterns**
- ❌ Don't test implementation details
- ❌ Don't write brittle tests that break on refactoring
- ❌ Don't skip error case testing
- ❌ Don't use real API calls in unit tests
- ❌ Don't ignore test failures or flaky tests
- ❌ Don't write tests without clear assertions

## 🔧 **CI/CD Integration**
- **Run tests** on every commit
- **Fail builds** on test failures
- **Generate coverage reports**
- **Test against multiple Node.js versions**
- **Include integration tests** in CI pipeline

---
description: 
globs: 
alwaysApply: false
---
# MCP Server Development Rules

## 🏗️ **MANDATORY Server Structure**
Each MCP server MUST follow this exact structure:
```
servers/{service-name}/
├── src/
│   ├── index.ts                # Entry point
│   ├── config/                 # Configuration management
│   ├── mcp-server/
│   │   ├── server.ts           # MCP server setup
│   │   ├── tools.ts            # Tool schemas (import from shared)
│   │   ├── resources.ts        # Resource definitions (import from shared)
│   │   ├── prompts.ts          # Prompt templates (import from shared)
│   │   └── tools/
│   │       └── {service}-tools.ts  # Tool implementations
├── Dockerfile                  # Container definition
├── package.json               # Dependencies
└── tsconfig.json              # TypeScript config extending tsconfig.base.json
```

## ✅ **MANDATORY Implementation Requirements**
- **ALL servers MUST implement 3 capabilities**: Tools, Resources, Prompts
- **Use MCP SDK correctly** with proper request handlers
- **Follow hub-and-spoke architecture** via gateway
- **Single responsibility** - one external service per server

```typescript
// ✅ CORRECT - Complete MCP server setup
const server = new Server(
  { name: "service-mcp-server", version: "1.0.0" },
  { capabilities: { tools: {}, resources: {}, prompts: {} } }
);
```

## 🔧 **Tool Implementation Patterns**
```typescript
// ✅ CORRECT tool implementation
import { McpResponse, SearchIssuesArgs } from "@mcp/schemas";

async linear_search_issues(args: SearchIssuesArgs): Promise<McpResponse<SearchResult>> {
  try {
    const data = await this.client.issues(args);
    return { success: true, data };
  } catch (error) {
    return { success: false, error: error.message };
  }
}
```

## 📋 **Response Format (MANDATORY)**
ALL tool responses MUST use this exact format:
```typescript
// ✅ Success response
{ success: true, data: T, timestamp?: string, executionTime?: number }

// ✅ Error response  
{ success: false, error: string, timestamp?: string, executionTime?: number }
```

## 🔧 **Configuration Patterns**
- Use environment variables for all secrets
- Extend from `tsconfig.base.json`
- Include health checks in Dockerfile
- Use exact versions for MCP SDK dependencies

## 🚫 **Server Anti-Patterns**
- ❌ Don't create servers without all 3 MCP capabilities
- ❌ Don't put business logic in the gateway
- ❌ Don't use console.log in production (use structured logging)
- ❌ Don't skip input validation with Zod schemas
